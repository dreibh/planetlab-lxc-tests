#!/bin/bash
# $Id$

# it does the following:
# (*) close all file descriptors and redirect output to log.txt 
#     this is because it is designed for use through ssh from a remote test master controller
# (*) initialize a disk image if it does not exist yet
# (*) starts a qemu instance 

# cd in this command's directory
COMMAND=$(basename $0)
cd $(dirname $0)

########## globals
# 1 gigabyte ram
RAM=1024
DISK_SIZE=18G
DISK_FORMAT=qcow2
DISK_IMAGE=hdd-${DISK_FORMAT}-${DISK_SIZE}.img

SCRIPT=qemu-ifup

####### we want this script to be invokable through ssh without the ssh client to remain hanging
# close stdin
exec <&-
# redirect stdout
exec >> log.txt
# redirect stderr on stdout
exec 2>&1

########## from the test environment
# expected vars are MACADDR, NODE_ISO, HOSTNAME, IP and TARGET_ARCH
CONFIG=qemu.conf
[ -f "$CONFIG" ] || { echo "Config file for qemu $CONFIG not found in $(pwd)" ; exit 1 ; }
. $CONFIG

# the launcher, depending on target arch
# make sure to check qemu-kill-node for consistency
case $TARGET_ARCH in
    i386)		QEMU=qemu ; ARGS="" ;;
    x86_64)		QEMU=qemu-system-x86_64 ; ARGS="-no-kqemu" ;;
    *)			echo "Cannot handle TARGET_ARCH=$TARGET_ARCH"; exit 1 ;;
esac

echo "Running $COMMAND in $(pwd)"
echo "Starting at $(date)"

#Creating new DISK_IMAGE if needed only
if [ -f $DISK_IMAGE ] ; then
    echo "Using existing $DISK_IMAGE"
else
    echo -n "Creating hard disk image (${DISK_SIZE}) as $DISK_IMAGE .. "
    img=$(qemu-img create -f ${DISK_FORMAT} $DISK_IMAGE ${DISK_SIZE})
    if [ -z "$img" ];then
	echo "Failed"
	exit 1
    fi
    echo "Done"
fi

echo 'Checking for a loaded kqemu module'
lsmod | grep kqemu
echo 'Checking for /dev/kqemu'
ls -l /dev/kqemu

echo 'Cleaning up pid file'
rm -f qemu.pid

# qemu options
# basics
ARGS="$ARGS -m ${RAM}"
ARGS="$ARGS -hda ${DISK_IMAGE}"
ARGS="$ARGS -nographic"
ARGS="$ARGS -pidfile qemu.pid"
# boot from CD
ARGS="$ARGS -boot d"
ARGS="$ARGS -cdrom ${NODE_ISO}"
# set mac address
ARGS="$ARGS -net nic,macaddr=${MACADDR}"
# set init script
ARGS="$ARGS -net tap,script=${SCRIPT}"
echo "Running $QEMU $ARGS"
exec $QEMU $ARGS &
